openapi: 3.0.0
info:
  title: Browserless.io Function API
  version: 2.0.0
servers:
- url: https://production-sfo.browserless.io
- url: https://production-lon.browserless.io
paths:
  /function:
    post:
      summary: Post custom code and context
      description: >
        The /function endpoint allows for POSTing of custom code and context to run them with. You can use Python, NodeJS or any other language that supports making HTTP requests.
      requestBody:
        required: true
        content:
          application/javascript:
            schema:
              properties:
                function:
                  type: string
                  description: Puppeteer code function
                  example: |
                    export default async function ({ page }) {
                      const rndNumber = () => {
                        return Math.floor(Math.random() * (10**6 - 0));
                      };

                      await page.goto("https://example.com/");
                      const url = await page.title();
                      const numbers = [...Array(5)].map(() => rndNumber());

                      return {
                        data: {
                          url,
                          numbers,
                        },
                        // Make sure to match the appropriate content here
                        type: "application/json",
                      };
                    }
            application/json:
              schema:
                properties:
                  code:
                    type: string
                    description: String, required — custom function code.
                    example: "import{faker as a}from\"https://esm.sh/@faker-js/faker\";export default async function({context:o}){let t=a.internet,e=[...Array(o.len)].map(()=>({domain:t.domainName(),ip:t.ip(),mac:t.mac(),protocol:t.protocol()}));return{data:{domains:e,length:o.len},type:`application/json`}};"
                  context:
                    type: object
                    description: Object, optional — value used to pass context values and arguments to the `code`
                    example: "{ \"len\": 10 }"
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    example: {"url":"Example Domain", "numbers": [854246,114512,212580,482122,107878]}
                  type:
                    type: string
                    example: "application/json"
        '400':
          description: Bad Request
